@page "/localization"

<h3>本地化</h3>

<p>
    本地化是为给定语言和地区定制应用程序的过程。<code>BootstrapBlazor</code> 组件允许您将其 UI 元素转换为所需的语言。这包括按钮、过滤器操作符属性等文本。组件内部默认使用当前系统 <code>UI</code> 文化语言，本文将向您展示如何在应用程序中使用此功能：
</p>

<Alert ShowBar="true" Color="@Color.Info">
    阅读以下知识点前请先查看 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/blazor/globalization-localization?view=aspnetcore-3.1" target="_blank">微软官方文档</a>
    <div>由于 <code>wasm</code> 模式无法获取系统语言文化信息，默认文化信息为 <code>en</code>，<Anchor Target="lang">请查阅文章最后更改默认语言章节</Anchor></div>
</Alert>

<p><b>本地化在组件中的工作原理</b></p>

<p>
    <code>BootstrapBlazor</code> 组件使用 <code>Json</code> 类型的键值信息作为资源文件，将其解析为 <code>UI</code> 中呈现的字符串。<a href="https://www.nuget.org/packages/BootstrapBlazor/" target="_blank">BootstrapBalzor-Nuget</a> 包自带中文（zh-CN）、英语（en-US）两种资源文件。
</p>

<p><b>开启本地化功能</b></p>

<p><b>Server-Side App</b></p>

<p><b>1. 启用 .NET 核心本地化服务</b></p>
<Pre>public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        // 增加 BootstrapBlazor 组件
        services.AddBootstrapBlazor();

        // 增加本地化服务配置信息
        services.Configure&lt;RequestLocalizationOptions&gt;(options =>
        {
            var supportedCultures = Configuration.GetSupportCultures().ToList();
            options.DefaultRequestCulture = new RequestCulture("zh-CN");
            options.SupportedCultures = supportedCultures;
            options.SupportedUICultures = supportedCultures;
        });
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        // 启用本地化
        app.UseRequestLocalization(app.ApplicationServices.GetService&lt;IOptions&lt;RequestLocalizationOptions&gt;&gt;().Value);
    }
}</Pre>

<p><b>2. 实现 UI 本地化信息存储（例如，cookie）</b></p>
<Pre>[Route("[controller]/[action]")]
public class CultureController : Controller
{
    public IActionResult SetCulture(string culture, string redirectUri)
    {
        if (culture != null)
        {
            HttpContext.Response.Cookies.Append(
                CookieRequestCultureProvider.DefaultCookieName,
                CookieRequestCultureProvider.MakeCookieValue(new RequestCulture(culture, culture)));
        }

        return LocalRedirect(redirectUri);
    }

    public IActionResult ResetCulture(string redirectUri)
    {
        HttpContext.Response.Cookies.Delete(CookieRequestCultureProvider.DefaultCookieName);

        return LocalRedirect(redirectUri);
    }
}</Pre>

<p><b>3. 添加允许用户更改本地化的 UI</b></p>
<Pre>@@using Microsoft.Extensions.Configuration
@@using System.Globalization
@@inherits BootstrapComponentBase
@@inject IConfiguration Configuration
@@inject NavigationManager NavigationManager
@@inject ICultureStorage CultureStorage

&lt;div @@attributes="@@AdditionalAttributes" class="@@ClassString"&gt;
    &lt;label&gt;请选择语言：&lt;/label&gt;
    &lt;Select Value="@@SelectedCulture" OnSelectedItemChanged="@@SetCulture"&gt;
        &lt;Options&gt;
            @@foreach (var kv in Configuration.GetSupportCultures())
            {
                &lt;SelectOption Text="@@kv.Key" Value="@@kv.Value" /&gt;
            }
        &lt;/Options&gt;
    &lt;/Select&gt;
&lt;/div&gt;

@@code {
    private string? ClassString =&gt; CssBuilder.Default("culture-selector")
        .AddClassFromAttributes(AdditionalAttributes)
        .Build();

    private string SelectedCulture { get; set; } = CultureInfo.CurrentUICulture.Name;

    private async Task SetCulture(SelectedItem item)
    {
        if (CultureStorage.Mode == CultureStorageMode.Webapi)
        {
            // 使用 api 方式 适用于 Server-Side 模式
            if (SelectedCulture != item.Value)
            {
                var culture = item.Value;
                var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var query = $"?culture={Uri.EscapeDataString(culture)}&redirectUri={Uri.EscapeDataString(uri)}";

                // use a path that matches your culture redirect controller from the previous steps
                NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
            }
        }
        else
        {
            var cultureName = item.Value;
            if (cultureName != CultureInfo.CurrentCulture.Name)
            {
                await JSRuntime.InvokeAsync&lt;string&gt;(identifier: "$.blazorCulture.set", cultureName);
                var culture = new CultureInfo(cultureName);
                CultureInfo.CurrentCulture = culture;
                CultureInfo.CurrentUICulture = culture;

                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            }
        }
    }
}</Pre>

<p><b>4. 添加 <code>Json</code> 资源文件</b></p>

<p>
    资源文件所在目录为 <code>~/Locales</code>，文件夹内为以文化开头的 <code>Json</code> 文件
</p>

<ul class="ul-demo">
    <li>zh-CN.json</li>
    <li>en-US.json</li>
</ul>

<p><b>Web Assembly</b></p>

<p><b>1. 启用 .NET 核心本地化服务</b></p>
<Pre>public static async Task Main(string[] args)
{
    var builder = WebAssemblyHostBuilder.CreateDefault(args);

    builder.RootComponents.Add&lt;App&gt;("app");

    builder.Services.AddTransient(sp =&gt; new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

    // 增加 BootstrapBlazor 组件
    builder.Services.AddBootstrapBlazor();

    builder.Services.AddSingleton&lt;ICultureStorage, DefaultCultureStorage&gt;();

    var host = builder.Build();

    await GetCultureAsync(host);

    await host.RunAsync();
}

private static async Task GetCultureAsync(WebAssemblyHost host)
{
    var jsRuntime = host.Services.GetRequiredService&lt;IJSRuntime&gt;();
    var cultureName = await jsRuntime.InvokeAsync&lt;string&gt;("$.blazorCulture.get") ?? "zh-CN";
    var culture = new CultureInfo(cultureName);
    CultureInfo.DefaultThreadCurrentCulture = culture;
    CultureInfo.DefaultThreadCurrentUICulture = culture;
}

internal class DefaultCultureStorage : ICultureStorage
{
    public CultureStorageMode Mode { get; set; } = CultureStorageMode.LocalStorage;
}
</Pre>

<p><b>2. 实现 UI 本地化信息存储（例如，localStorage）</b></p>

<p>与 Server-Side 一致</p>

<p id="lang"><b>更改默认语言设置</b></p>

<Pre>public void ConfigureServices(IServiceCollection services)
{
    // 增加 BootstrapBlazor 组件
    services.AddBootstrapBlazor(options =>
    {
        // 设置默认语言
        // 组件内部已开启自动判断系统语言信息设置默认文化信息，未设置 DefaultUICultureInforName 时自动判断
        options.DefaultUICultureInfoName = "zh-CN";
    });
}
</Pre>
